services:
  front:
    image: $APP_FRONT_IMAGE
    volumes:
      - static_next_next:/home/app/.next/static
      - public_next_volume:/home/app/public
    networks:
      - deploy
  web:
    image: $APP_WEB_IMAGE
    entrypoint: ['/cache/entrypoint.sh']
    command: gunicorn --bind 0.0.0.0:8000 src.wsgi:application
    depends_on:
      - web_migrate
      - web_collectstatic
    networks:
      - ab_datastore_postgres
      - deploy
    volumes:
      - static_web_volume:/opt/portfolio/static
      - media_web_volume:/opt/portfolio/media
    restart: always
  web_migrate:
    image: $APP_WEB_IMAGE
    entrypoint: ['/cache/entrypoint.sh']
    command: python manage.py migrate
    env_file:
      - ./env_file/variables.env
    networks:
      - ab_datastore_postgres
  web_collectstatic:
    image: $APP_WEB_IMAGE
    command: python manage.py collectstatic --clear --no-input
    env_file:
      - ./env_file/variables.env
    volumes:
      - static_web_volume:/opt/portfolio/static
      - media_web_volume:/opt/portfolio/media
  lb:
    container_name: lb_portfolio
    image: $APP_LB_IMAGE
    volumes:
      - static_web_volume:/home/app/static
      - media_web_volume:/home/app/media
      - static_next_next:/home/app/next_static
      - public_next_volume:/home/app/next_public
    depends_on:
      - web
    restart: always
    networks:
      - deploy
      - ab_proxy_nginx

networks:
  ab_datastore_postgres:
    external: true
  ab_proxy_nginx:
    external: true
  deploy:
    driver: bridge

volumes:
  static_web_volume:
  media_web_volume:
  static_next_next:
  public_next_volume:

